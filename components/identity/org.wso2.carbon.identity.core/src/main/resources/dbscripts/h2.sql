CREATE TABLE IF NOT EXISTS IDN_BASE_TABLE (
            PRODUCT_NAME VARCHAR (20),
            PRIMARY KEY (PRODUCT_NAME)
);

INSERT INTO IDN_BASE_TABLE values ('WSO2 Identity Server');

CREATE TABLE IF NOT EXISTS IDN_OAUTH_CONSUMER_APPS (
            CONSUMER_KEY VARCHAR (512),
            CONSUMER_SECRET VARCHAR (512),
            USERNAME VARCHAR (255),
            TENANT_ID INTEGER DEFAULT 0,
            APP_NAME VARCHAR (255),
            OAUTH_VERSION VARCHAR (128),
            CALLBACK_URL VARCHAR (1024),
            PRIMARY KEY (CONSUMER_KEY)
);

CREATE TABLE IF NOT EXISTS IDN_OAUTH1A_REQUEST_TOKEN (
            REQUEST_TOKEN VARCHAR (512),
            REQUEST_TOKEN_SECRET VARCHAR (512),
            CONSUMER_KEY VARCHAR (512),
            CALLBACK_URL VARCHAR (1024),
            SCOPE VARCHAR(2048),
            AUTHORIZED VARCHAR (128),
            OAUTH_VERIFIER VARCHAR (512),
            AUTHZ_USER VARCHAR (512),
            PRIMARY KEY (REQUEST_TOKEN),
            FOREIGN KEY (CONSUMER_KEY) REFERENCES IDN_OAUTH_CONSUMER_APPS(CONSUMER_KEY) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS IDN_OAUTH1A_ACCESS_TOKEN (
            ACCESS_TOKEN VARCHAR (512),
            ACCESS_TOKEN_SECRET VARCHAR (512),
            CONSUMER_KEY VARCHAR (512),
            SCOPE VARCHAR(2048),
            AUTHZ_USER VARCHAR (512),
            PRIMARY KEY (ACCESS_TOKEN),
            FOREIGN KEY (CONSUMER_KEY) REFERENCES IDN_OAUTH_CONSUMER_APPS(CONSUMER_KEY) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS IDN_OAUTH2_AUTHORIZATION_CODE (
            AUTHORIZATION_CODE VARCHAR (512),
            CONSUMER_KEY VARCHAR (512),
            SCOPE VARCHAR(2048),
            AUTHZ_USER VARCHAR (512),
            TIME_CREATED TIMESTAMP,
			VALIDITY_PERIOD BIGINT,
            PRIMARY KEY (AUTHORIZATION_CODE),
            FOREIGN KEY (CONSUMER_KEY) REFERENCES IDN_OAUTH_CONSUMER_APPS(CONSUMER_KEY) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS IDN_OAUTH2_ACCESS_TOKEN (
			ACCESS_TOKEN VARCHAR (255),
			REFRESH_TOKEN VARCHAR (255),
			CONSUMER_KEY VARCHAR (255),
			AUTHZ_USER VARCHAR (100),
			USER_TYPE VARCHAR (25),
			TIME_CREATED TIMESTAMP,
			VALIDITY_PERIOD BIGINT,
			TOKEN_SCOPE VARCHAR (25),
			TOKEN_STATE VARCHAR (25) DEFAULT 'ACTIVE',
			TOKEN_STATE_ID VARCHAR (256) DEFAULT 'NONE',
			PRIMARY KEY (ACCESS_TOKEN),
	FOREIGN KEY (CONSUMER_KEY) REFERENCES IDN_OAUTH_CONSUMER_APPS(CONSUMER_KEY) ON DELETE CASCADE,
	CONSTRAINT CON_APP_KEY UNIQUE (CONSUMER_KEY, AUTHZ_USER,USER_TYPE,TOKEN_SCOPE,TOKEN_STATE,TOKEN_STATE_ID)
);

CREATE TABLE IF NOT EXISTS IDN_SCIM_GROUP (
            ID INTEGER GENERATED ALWAYS AS IDENTITY,
            TENANT_ID INTEGER NOT NULL,
            ROLE_NAME VARCHAR(255) NOT NULL,
            ATTR_NAME VARCHAR(1024) NOT NULL,
			ATTR_VALUE VARCHAR(1024),
            PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS IDN_SCIM_PROVIDER (
            CONSUMER_ID VARCHAR(255) NOT NULL,
            PROVIDER_ID VARCHAR(255) NOT NULL,
            USER_NAME VARCHAR(255) NOT NULL,
            USER_PASSWORD VARCHAR(255) NOT NULL,
            USER_URL VARCHAR(1024) NOT NULL,
			GROUP_URL VARCHAR(1024),
			BULK_URL VARCHAR(1024),
            PRIMARY KEY (CONSUMER_ID,PROVIDER_ID)
);

CREATE TABLE IF NOT EXISTS IDN_OPENID_REMEMBER_ME (
            USER_NAME VARCHAR(255) NOT NULL,
            TENANT_ID INTEGER DEFAULT 0,
            COOKIE_VALUE VARCHAR(1024),
            CREATED_TIME TIMESTAMP,
            PRIMARY KEY (USER_NAME, TENANT_ID)
);

CREATE TABLE IF NOT EXISTS IDN_OPENID_USER_RPS (
			USER_NAME VARCHAR(255) NOT NULL,
			TENANT_ID INTEGER DEFAULT 0,
			RP_URL VARCHAR(255) NOT NULL,
			TRUSTED_ALWAYS VARCHAR(128) DEFAULT 'FALSE',
			LAST_VISIT DATE NOT NULL,
			VISIT_COUNT INTEGER DEFAULT 0,
			DEFAULT_PROFILE_NAME VARCHAR(255) DEFAULT 'DEFAULT',
			PRIMARY KEY (USER_NAME, TENANT_ID, RP_URL)
);

CREATE TABLE IF NOT EXISTS IDN_OPENID_ASSOCIATIONS (
			HANDLE VARCHAR(255) NOT NULL,
			ASSOC_TYPE VARCHAR(255) NOT NULL,
			EXPIRE_IN TIMESTAMP NOT NULL,
			MAC_KEY VARCHAR(255) NOT NULL,
			ASSOC_STORE VARCHAR(128) DEFAULT 'SHARED',
			PRIMARY KEY (HANDLE)
);

CREATE TABLE IDN_STS_STORE (
                        ID INTEGER AUTO_INCREMENT,
                        TOKEN_ID VARCHAR(255) NOT NULL,
                        TOKEN_CONTENT BLOB(4096) NOT NULL,
                        CREATE_DATE TIMESTAMP NOT NULL,
                        EXPIRE_DATE TIMESTAMP NOT NULL,
                        STATE INTEGER DEFAULT 0,
            PRIMARY KEY (ID)
);

CREATE TABLE IDN_IDENTITY_USER_DATA (
                        TENANT_ID INTEGER DEFAULT -1234,
                        USERR_NAME VARCHAR(255) NOT NULL,
                        DATA_KEY VARCHAR(255) NOT NULL,
                        DATA_VALUE VARCHAR(255) NOT NULL,
            PRIMARY KEY (TENANT_ID, USERR_NAME, DATA_KEY)
);
CREATE  TABLE IF NOT EXISTS CA_CERTIFICATE_STORE (
    SERIAL_NO VARCHAR(45) NOT NULL ,
    CERTIFICATE BLOB NULL ,
    STATUS VARCHAR(45) NULL DEFAULT 'ACTIVE',
    ISSUED_DATE DATE NULL ,
    EXPIRY_DATE DATE NULL ,
    TENANT_ID INTEGER NULL ,
    USER_NAME VARCHAR(45) NULL ,
    UM_DOMAIN_NAME VARCHAR(45) NULL ,
    PRIMARY KEY (SERIAL_NO)
);

CREATE  TABLE IF NOT EXISTS CA_CSR_STORE (
    COMMON_NAME VARCHAR(100) NOT NULL,
    ORGANIZATION VARCHAR(100),
    USER_NAME VARCHAR(255) NULL,
    TENANT_ID INTEGER DEFAULT 0,
    CSR_CONTENT BLOB NOT NULL ,
    STATUS VARCHAR(45) NULL DEFAULT 'PENDING' ,
    REQUESTED_DATE DATE NOT NULL ,
    SERIAL_NO VARCHAR(45) NOT NULL ,
    UM_DOMAIN_NAME VARCHAR(45) NULL ,
    PRIMARY KEY (SERIAL_NO)
);

CREATE  TABLE IF NOT EXISTS CA_REVOKED_CERTIFICATES (
    SERIAL_NO VARCHAR(45) NOT NULL ,
    REVOKED_DATE DATE NULL ,
    TENANT_ID INTEGER NULL ,
    REASON INTEGER NULL ,
    PRIMARY KEY (SERIAL_NO)
);

CREATE  TABLE IF NOT EXISTS CA_CRL_STORE (
    CRL_NUMBER INTEGER NOT NULL,
    BASE64CRL LONGTEXT NOT NULL,
    THIS_UPDATE DATE NULL ,
    NEXT_UPDATE DATE NULL ,
    TENANT_ID INTEGER NULL ,
    DELTA_CRL_INDICATOR INTEGER NULL ,
    PRIMARY KEY (CRL_NUMBER, TENANT_ID) );

CREATE TABLE IF NOT EXISTS CA_SCEP_STORE (
    TOKEN VARCHAR(100) NOT NULL,
    CREATED_TIME TIMESTAMP NOT NULL,
    USER_NAME VARCHAR(255) NULL,
    TENANT_ID INTEGER DEFAULT 0,
    UM_DOMAIN_NAME VARCHAR(45) NULL ,
    SERIAL_NO VARCHAR NULL COMMENT 'Will be the serial of the CSR/Cert generated for the token',
    PRIMARY KEY (TOKEN)
);

CREATE  TABLE IF NOT EXISTS CA_CONFIGURATIONS (
    TENANT_ID INTEGER NOT NULL ,
    KEY_STORE VARCHAR(45) NULL ,
    ALIAS VARCHAR(45) ,
    PRIMARY KEY (TENANT_ID)
);

